/**
 * @file "native/src/utf.h"
 * Definitions and declarations for handling
 * Unicode Transformation Format text (UTF-8 and UTF-16)
 */

#ifndef H_WEBCARD__UTF
#define H_WEBCARD__UTF

#include "os_specific/os_specific.h"

#ifdef __cplusplus
  extern "C" {
#endif


/**************************************************************/
/* UTF-8 STRING                                               */
/**************************************************************/

/**
 * `UTF8String` type definition.
 */
typedef struct UTF8String UTF8String;

/**
 * Represents a UTF-8 formatted text.
 */
struct UTF8String
{
  /** Current length of the text (not including the NULL-terminator) */
  size_t length;

  /**
   * Allocated text capacity in characters (in 8-bit bytes).
   * Should be at least `length + 1` to include the NULL-terminator.
   */
  size_t capacity;

  /** Dynamically-allocated text buffer. Will containt a NULL-terminator. */
  LPBYTE text;
};

/**
 * @brief `UTF8String` constructor.
 *
 * @param[out] string Reference to an UNINITIALIZED `UTF8String` object.
 */
extern VOID
UTF8String_init(
  _Out_ UTF8String *string);

/**
 * @brief `UTF8String` destructor.
 *
 * @param[in,out] string Reference to a VALID `UTF8String` object.
 *
 * @note After this call, `string` should not be used (unless re-initialized).
 */
extern VOID
UTF8String_destroy(
  _Inout_ UTF8String *string);

/**
 * @brief Creates a deep-copy (independent memory allocation)
 * of the `UTF8String` object.
 *
 * @param[out] destination Reference to an UNINITIALIZED
 * `UTF8String` object (copy destination).
 * @param[in] source Reference to a VALID and CONSTANT `UTF8String` object
 * (copy source).
 * @return `TRUE` on success, `FALSE` on memory allocation failure.
 *
 * @note After this call, `destination` will hold a VALID (at least initialized)
 * `UTF8String` object. If the function returned `FALSE`,
 * `destination` shall be destroyed.
 */
extern BOOL
UTF8String_copy(
  _Out_ UTF8String *destination,
  _In_ const UTF8String *source);

/**
 * @brief Creates a temporary (read-only) `UTF8String` object.
 *
 * This object can be used for instance as a temporary Key
 * or a temporary Value, before it a deep-copy is performed.
 * @param[out] destination Reference to an UNINITIALIZED `UTF8String` object.
 * @param[in] text Some read-only, NULL-terminated UTF-8 text.
 *
 * @note String's destructor shall NOT be called, because the `text`
 * param might come from a stack instead of a heap. After reading data
 * from the `string` object, it should be treated as UNINITIALIZED.
 */
extern VOID
UTF8String_makeTemporary(
  _Out_ UTF8String *string,
  _In_ LPCSTR text);

/**
 * @brief Push (append) one 8-bit byte (char) at the end of the string.
 *
 * @param[in,out] string Reference to a VALID `UTF8String` object.
 * @param[in] byte A byte to be added to the string.
 * @return `TRUE` on success, `FALSE` on memory allocation failure.
 */
extern BOOL
UTF8String_pushByte(
  _Inout_ UTF8String *string,
  _In_ const BYTE byte);

/**
 * @brief Push byte array in hexadecimal representation (2 ASCII characters
 * for each element) at the end of the string.
 *
 * @param[in,out] string Reference to a VALID `UTF8String` object.
 * @param[in] byteArraySize The length of the passed byte array.
 * @param[in] bytes An arbitrary array of bytes (each element holds a value
 * from 0 to 255).
 * @return `TRUE` on success, `FALSE` on memory allocation failure.
 */
extern BOOL
UTF8String_pushBytesAsHex(
  _Inout_ UTF8String *string,
  _In_ size_t byteArraySize,
  _In_ const BYTE *bytes);

/**
 * @brief Generates byte array from a hexadecimal representation
 * (2 ASCII characters for each byte).
 *
 * @param[in] string Reference to a VALID and CONSTANT `UTF8String` object.
 * @param[out] byteArraySizeRef Pointer to a variable that will hold
 * the size of the generated byte array.
 * @param[out] result Pointer to a location that will receive a dynamically
 * allocated array of bytes. It will be `NULL` on memory allocation failure.
 * @return `TRUE` on success, `FALSE` on memory allocation failure OR
 * when the given string is not composed of hexadecimal characters only.
 *
 * @note After this call, `result[0]` will hold a VALID (at least initialized)
 * `BYTE` array. If the function returned `FALSE`,
 * `result[0]` shall be destroyed.
 */
extern BOOL
UTF8String_hexToByteArray(
  _In_ const UTF8String *string,
  _Out_ size_t *byteArraySizeRef,
  _Outptr_result_maybenull_ BYTE **const result);

/**
 * @brief Push (append) some text at the end of the string.
 *
 * @param[in,out] string Reference to a VALID `UTF8String` object.
 * @param[in] rightText Read-only UTF-8 text to be appended.
 * @param[in] rightTextLength Length of the passed text. It can be set to `0`,
 * in which case the appended text will be treated as NULL-terminated string.
 * @return `TRUE` on success, `FALSE` on memory allocation failure.
 */
extern BOOL
UTF8String_pushText(
  _Inout_ UTF8String *string,
  _In_ LPCSTR rightText,
  _In_ size_t rightTextLength);

/**
 * @brief Does the string fully match (case-sensitive, exact length)
 * some given text?
 *
 * @param[in] string Reference to a VALID and CONSTANT `UTF8String` object.
 * @param[in] testedText A valid (NULL-terminated) UTF-8 text for comparison.
 * @return `TRUE` if given strings are equal, `FALSE` otherwise.
 */
extern BOOL
UTF8String_matches(
  _In_ const UTF8String *string,
  _In_z_ LPCSTR testedText);

/**
 * @brief Sends the string to Standard Output stream.
 *
 * This method first stores the string length (32-bit integer),
 * then stores the text buffer contents (without the NULL-terminator).
 * @param[in] string Reference to a VALID and CONSTANT `UTF8String` object.
 * @return `TRUE` on success, `FALSE` if the stream-writing functions failed.
 */
extern BOOL
UTF8String_writeToStandardOutput(
  _In_ const UTF8String *string);


/**************************************************************/
/* UTF-16 STRING                                              */
/**************************************************************/

/**
 * `UTF16String` type definition.
 */
typedef struct UTF16String UTF16String;

/**
 * Represents a UTF-16 formatted text.
 */
struct UTF16String
{
  /** Current length of the text (not including the NULL-terminator) */
  size_t length;

  /**
   * Allocated text capacity in characters (in 16-bit words).
   * Should be at least `length + 1` to include the NULL-terminator.
   */
  size_t capacity;

  /** Dynamically-allocated text buffer. Will containt a NULL-terminator. */
  LPWSTR text;
};

/**
 * @brief `UTF16String` constructor.
 *
 * @param[out] string Reference to an UNINITIALIZED `UTF16String` object.
 */
extern VOID
UTF16String_init(
  _Out_ UTF16String *string);

/**
 * @brief `UTF16String` destructor.
 *
 * @param[in,out] string Reference to a VALID `UTF16String` object.
 *
 * @note After this call, `string` should not be used (unless re-initialized).
 */
extern VOID
UTF16String_destroy(
  _Inout_ UTF16String *string);

/**
 * @brief Creates a deep-copy (independent memory allocation)
 * of the `UTF16String` object.
 *
 * @param[out] destination Reference to an UNINITIALIZED
 * `UTF16String` object (copy destination).
 * @param[in] source Reference to a VALID and CONSTANT `UTF16String` object
 * (copy source).
 * @return `TRUE` on success, `FALSE` on memory allocation failure.
 *
 * @note After this call, `destination` will hold a VALID (at least initialized)
 * `UTF16String` object. If the function returned `FALSE`,
 * `destination` shall be destroyed.
 */
extern BOOL
UTF16String_copy(
  _Out_ UTF16String *destination,
  _In_ const UTF16String *source);

/**
 * @brief Push (append) one 16-bit word (wide char) at the end of the string.
 *
 * @param[in,out] string Reference to a VALID `UTF16String` object.
 * @param[in] code A codepoint to be added to the string.
 * @return `TRUE` on success, `FALSE` on memory allocation failure.
 */
extern BOOL
UTF16String_pushWideChar(
  _Inout_ UTF16String *string,
  _In_ const WCHAR code);

/**
 * @brief Push byte array in hexadecimal representation (2 ASCII characters
 * for each element) at the end of the string.
 *
 * @param[in,out] string Reference to a VALID `UTF16String` object.
 * @param[in] byteArraySize The length of the passed byte array.
 * @param[in] bytes An arbitrary array of bytes (each element holds a value
 * from 0 to 255).
 * @return `TRUE` on success, `FALSE` on memory allocation failure.
 */
extern BOOL
UTF16String_pushBytesAsHex(
  _Inout_ UTF16String *string,
  _In_ size_t byteArraySize,
  _In_ const BYTE *bytes);

/**
 * @brief Generates byte array from a hexadecimal representation
 * (2 ASCII characters for each byte).
 *
 * @param[in] string Reference to a VALID and CONSTANT `UTF16String` object.
 * @param[out] byteArraySizeRef Pointer to a variable that will hold
 * the size of the generated byte array.
 * @param[out] result Pointer to a location that will receive a dynamically
 * allocated array of bytes. It will be `NULL` on memory allocation failure.
 * @return `TRUE` on success, `FALSE` if the given string is not composed
 * of hexadecimal characters only.
 */
extern BOOL
UTF16String_hexToByteArray(
  _In_ const UTF16String *string,
  _Out_ size_t *byteArraySizeRef,
  _Outptr_result_maybenull_ BYTE **const result);

/**
 * @brief Push (append) some text at the end of the string.
 *
 * @param[in,out] string Reference to a VALID `UTF16String` object.
 * @param[in] rightText Read-only UTF-16 text to be appended.
 * @param[in] rightTextLength Length of the passed text. It can be set to `0`,
 * in which case the appended text will be treated as NULL-terminated string.
 * @return `TRUE` on success, `FALSE` on memory allocation failure.
 */
extern BOOL
UTF16String_pushText(
  _Inout_ UTF16String *string,
  _In_ LPCWSTR rightText,
  _In_ size_t rightTextLength);

/**
 * @brief Does the string fully match (case-sensitive, exact length)
 * some given text?
 *
 * @param[in] string Reference to a VALID and CONSTANT `UTF16String` object.
 * @param[in] testedText A valid (NULL-terminated) UTF-16 text for comparison.
 * @return `TRUE` if given strings are equal, `FALSE` otherwise.
 */
extern BOOL
UTF16String_matches(
  _In_ const UTF16String *string,
  _In_z_ LPCWSTR testedText);


/**************************************************************/
/* UNICODE TRANSFORMATIONS                                    */
/**************************************************************/

/**
 * @brief Validates that given byte stream forms a valid UTF-8 representation
 * of some Unicode character.
 *
 * The correct encoding of a code point uses only the minimum number of bytes
 * required to hold the significant bits of the code point.
 * @param[in] bytes A stream of bytes that should start with a signed char
 * (`110xxxxx`, `1110xxxx`, `11110xxx`).
 * @param[in,out] lengthRef A VALID pointer that hold the number of bytes
 * available in the stream (the number can be longer than the actual code point
 * representation). After the call, this memory location notifies about
 * the actual number of bytes occupied by the decoded char.
 * @param[out] codePointRef An OPTIONAL pointer to a location that will receive
 * a decoded Unicode character.
 */
extern BOOL
UTF8_validateTransformation(
  _In_ const BYTE *bytes,
  _Inout_ size_t *lengthRef,
  _Out_opt_ uint32_t *codePointRef);

/**
 * @brief Converts UTF-16 string to an UTF-8 string.
 *
 * @param[in] string Reference to a VALID and CONSTANT `UTF16String` object.
 * @param[out] output Refernce to a VALID `UTF8String` object.
 *
 * @note `output` doesn't have to be empty. Converted codepoints from
 * the source string are simply appended at the end of the destination string.
 */
extern BOOL
UTF16String_toUTF8(
  _In_ const UTF16String *string,
  _Inout_ UTF8String *output);


/**************************************************************/

#ifdef __cplusplus
  }
#endif

#endif  /* H_WEBCARD__UTF */
